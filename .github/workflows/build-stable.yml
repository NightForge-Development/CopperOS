name: Build OS Image

on:
  schedule:
    - cron: '0 0 */14 * *'  # Every 2 weeks
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' || github.event_name == 'schedule'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Important: get full history for merge-base

      - name: Install dependencies
        run: |
          sudo apt update
          sudo apt install -y nasm gcc make curl jq

      - name: Get latest release and compute next version
        id: version
        run: |
          LATEST=$(curl -L -H "Accept: application/vnd.github+json" -H "Authorization: Bearer $RELEASE_TOKEN" -H "X-GitHub-Api-Version: 2022-11-28" https://api.github.com/repos/${{ github.repository }}/releases/latest | jq -r .tag_name)
          echo "Latest release tag: $LATEST"
          
          if [[ "$LATEST" =~ ^v([0-9]+)\.([0-9]+)\.([0-9]+)$ ]]; then
            MAJOR="${BASH_REMATCH[1]}"
            MINOR="${BASH_REMATCH[2]}"
            PATCH="${BASH_REMATCH[3]}"
          else
            MAJOR=0; MINOR=0; PATCH=0
          fi

          PATCH=$((PATCH + 1))
          if [ $PATCH -ge 10 ]; then
            PATCH=0
            MINOR=$((MINOR + 1))
          fi

          if [ $MINOR -ge 10 ]; then
            MINOR=0
            MAJOR=$((MAJOR + 1))
          fi

          VERSION="v${MAJOR}.${MINOR}.${PATCH}"
          NAME="CopperOS - ${VERSION}"
          echo "Next version: $VERSION"
          echo "tag_name=$VERSION" >> $GITHUB_OUTPUT
          echo "version_name=$NAME" >> $GITHUB_OUTPUT

      - name: Build OS image
        run: |
          nasm -f bin boot.asm -o boot.bin
          nasm -f bin boot32.asm -o boot32.bin
          nasm -f bin boot64.asm -o boot64.bin
          nasm -f bin second_stage.asm -o second_stage.bin
          gcc -ffreestanding -mcmodel=large -mno-red-zone -m64 -c kernel.c -o kernel.o -fno-pie -no-pie
          ld -T linker.ld -nostdlib kernel.o -o kernel.bin
          cat boot.bin second_stage.bin boot32.bin boot64.bin kernel.bin > os_image.bin

      - name: Github Actions Create Release
        uses: Hs1r1us/Release-AIO@v2.0.0
        with:
          token: ${{ secrets.UPLOAD_TOKEN }}
          # The name of the tag. This should come from the webhook payload, `github.GITHUB_REF` when a user pushes a new tag
          tag_name: ${{ steps.version.outputs.tag_name }}
          # The name of the release. For example, `Release v1.0.1`
          release_name: ${{ steps.version.outputs.version_name }}
          # Text describing the contents of the tag.
          body: "Release made by GitHub Actions..."
          # Assets to be uploaded to the Release
          asset_files: "os_image.bin"
        env:
          # GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          RELEASE_TOKEN: ${{ secrets.UPLOAD_TOKEN }}
